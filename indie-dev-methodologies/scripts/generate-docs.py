#!/usr/bin/env python3
"""
Documentation Generation Script for IndieDevHQ
Automatically generates and updates project documentation
"""

import os
import sys
import json
import subprocess
from pathlib import Path
from datetime import datetime

def run_command(command, cwd=None):
    """Run a shell command and return output"""
    try:
        result = subprocess.run(
            command, shell=True, capture_output=True, text=True, cwd=cwd
        )
        return result.stdout.strip(), result.returncode
    except Exception as e:
        print(f"Error running command '{command}': {e}")
        return "", 1

def detect_project_type(project_path):
    """Detect the type of project"""
    if (project_path / "src-tauri" / "Cargo.toml").exists():
        return "tauri"
    elif (project_path / "package.json").exists():
        package_json = json.loads((project_path / "package.json").read_text())
        if "electron" in str(package_json.get("dependencies", {})) or "electron" in str(package_json.get("devDependencies", {})):
            return "electron"
        return "web"
    return "unknown"

def generate_project_overview(project_path):
    """Generate project overview documentation"""
    project_name = project_path.name
    project_type = detect_project_type(project_path)
    
    # Get git information
    git_output, _ = run_command("git log --oneline -n 5", cwd=project_path)
    recent_commits = git_output.split('\n') if git_output else []
    
    # Get file structure
    structure_output, _ = run_command("find . -type f -name '*.rs' -o -name '*.js' -o -name '*.ts' -o -name '*.json' -o -name '*.md' | head -20", cwd=project_path)
    key_files = structure_output.split('\n') if structure_output else []
    
    overview = f"""# {project_name} - Project Overview

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Project Type**: {project_type}
**Framework**: IndieDevHQ Methodology

## Project Summary

This document provides an automatically generated overview of the {project_name} project structure and status.

## Project Type: {project_type.title()}

{get_project_type_description(project_type)}

## Key Files

```
{chr(10).join(key_files[:15])}
{'...' if len(key_files) > 15 else ''}
```

## Recent Development Activity

```
{chr(10).join(recent_commits[:5])}
```

## Development Commands

{get_development_commands(project_type)}

## Project Structure Analysis

- **Configuration Files**: {count_files_by_pattern(project_path, ['*.json', '*.toml', '*.yml', '*.yaml'])}
- **Source Files**: {count_files_by_pattern(project_path, ['*.rs', '*.js', '*.ts', '*.jsx', '*.tsx'])}
- **Documentation Files**: {count_files_by_pattern(project_path, ['*.md', '*.txt'])}

---

*This documentation was automatically generated by IndieDevHQ documentation tools on {datetime.now().strftime('%Y-%m-%d')}*
"""
    
    return overview

def get_project_type_description(project_type):
    """Get description for project type"""
    descriptions = {
        "tauri": "Tauri-based desktop application with Rust backend and web frontend technologies.",
        "electron": "Electron-based desktop application using Node.js and web technologies.",
        "web": "Web-based application using modern JavaScript/TypeScript frameworks.",
        "unknown": "Project structure not recognized - manual documentation required."
    }
    return descriptions.get(project_type, descriptions["unknown"])

def get_development_commands(project_type):
    """Get development commands for project type"""
    commands = {
        "tauri": """
### Tauri Development
```bash
# Start development server
cargo tauri dev

# Build for production  
cargo tauri build

# Run tests
cargo test
```""",
        "electron": """
### Electron Development
```bash
# Start development server
npm run dev

# Build for production
npm run build

# Run tests
npm test
```""",
        "web": """
### Web Development  
```bash
# Start development server
npm run dev

# Build for production
npm run build

# Run tests
npm test
```""",
        "unknown": """
### Development Commands
Please configure development commands in package.json or document them manually.
"""
    }
    return commands.get(project_type, commands["unknown"])

def count_files_by_pattern(project_path, patterns):
    """Count files matching given patterns"""
    count = 0
    for pattern in patterns:
        output, _ = run_command(f"find . -name '{pattern}' | wc -l", cwd=project_path)
        count += int(output) if output.isdigit() else 0
    return count

def update_readme(project_path):
    """Update README.md with current project status"""
    readme_path = project_path / "README.md"
    
    if not readme_path.exists():
        print("No README.md found, creating basic template")
        readme_content = f"""# {project_path.name}

A {detect_project_type(project_path)} application built with IndieDevHQ methodology.

## Development

```bash
# Install dependencies
npm install

# Start development server
npm run dev
```

## Build

```bash
# Build for production
npm run build
```

---

*Last updated: {datetime.now().strftime('%Y-%m-%d')}*
"""
        readme_path.write_text(readme_content)
        print("✅ Created README.md")
        return
    
    # Update last modified date in existing README
    content = readme_path.read_text()
    if "*Last updated:" in content:
        lines = content.split('\n')
        for i, line in enumerate(lines):
            if "*Last updated:" in line:
                lines[i] = f"*Last updated: {datetime.now().strftime('%Y-%m-%d')}*"
                break
        readme_path.write_text('\n'.join(lines))
        print("✅ Updated README.md timestamp")
    else:
        # Add timestamp to end
        content += f"\n\n---\n\n*Last updated: {datetime.now().strftime('%Y-%m-%d')}*\n"
        readme_path.write_text(content)
        print("✅ Added timestamp to README.md")

def main():
    project_path = Path(sys.argv[1]) if len(sys.argv) > 1 else Path.cwd()
    
    if not project_path.exists():
        print(f"Error: Project path '{project_path}' does not exist")
        sys.exit(1)
    
    print(f"🔧 Generating documentation for: {project_path.name}")
    print(f"📍 Path: {project_path}")
    
    # Generate project overview
    docs_dir = project_path / "docs"
    docs_dir.mkdir(exist_ok=True)
    
    overview_path = docs_dir / "PROJECT_OVERVIEW.md"
    overview_content = generate_project_overview(project_path)
    overview_path.write_text(overview_content)
    print(f"✅ Generated: {overview_path}")
    
    # Update README
    update_readme(project_path)
    
    print("🎉 Documentation generation completed!")

if __name__ == "__main__":
    main()